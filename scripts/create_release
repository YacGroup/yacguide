#! /usr/bin/env python3
#
# YacGuide Android Application
#
# Copyright (C) 2020 Christian Sommer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

"""Script for creating releases."""

import os
import re
import argparse
from datetime import datetime
import git
import packaging.version

RELEASE_TYPES = ["dev", "stable"]


def get_cli_parser():
    """Return argument parser object."""
    parser = argparse.ArgumentParser(description=__doc__)
    help_release_type = "release type (default: %(default)s)"
    parser.add_argument("--release-type", choices=RELEASE_TYPES,
                        default="dev", help=help_release_type)
    help_version = """release version string. For release type 'dev'
it is the date code in the format 'YYYYMMDD'. For release type
'stable' the format is expected to be 'X.Y.Y'."""
    parser.add_argument("--version", help=help_version)
    help_skip_checks = "skip checks"
    parser.add_argument("--skip-checks", action="store_true",
                        default=False, help=help_skip_checks)
    return parser


class Release:
    """Release Class

    Attributes:
        cli_parser (argparse.ArgumentParser): Command line interface
            parser
        cli_args (argparse.Namespace): Parsed CLI arguments
        repo (git.Repo): Git repo object
    """
    _GRADLE_FILE = "app/build.gradle"

    def __init__(self):
        self.cli_parser = get_cli_parser()
        self.cli_args = self.cli_parser.parse_args()
        self.repo = git.Repo(os.getcwd())

    def main(self):
        """Main function"""
        if not self.cli_args.skip_checks:
            self.pre_checks()
        if self.cli_args.release_type == "dev":
            self.create_dev_release()
        elif self.cli_args.release_type == "stable":
            self.create_stable_release()

    def error(self, msg):
        """Print error message and exit with code 1."""
        print("ERROR: %s" % msg)
        exit(1)

    def pre_checks(self):
        """Run some checks before creating the release."""
        if self.repo.is_dirty():
            self.error("Repo is dirty.")

    def set_version_code(self, gradle_str, flavor, code):
        rexpr = re.compile(
            r'(%s\s*\{[^\}]*versionCode)\s+[\d\.]+' % flavor,
            re.MULTILINE)
        gradle_str_updated = rexpr.sub(
            r'\1 %s' % code,
            gradle_str)
        return gradle_str_updated

    def set_version_name(self, gradle_str, flavor, name):
        rexpr = re.compile(
            r'(%s\s*\{[^\}]*versionName)\s+\'[\d\.]+\'+' % flavor,
            re.MULTILINE)
        gradle_str_updated = rexpr.sub(
            r"\1 '%s'" % name,
            gradle_str)
        return gradle_str_updated

    def version_to_code(self, version, flavor="stable"):
        """Convert version into corresponding code.

        Args:
            version (str): Version string
            flavor (str, optional): Android flavor

        Returns:
            int: Version code
        """
        if flavor == "stable":
            # Convert 'x.y.z' to 'XXXYYYZZZ'
            major, minor, bug = version.split(".")
            code_str = "{0:0>3}{1:0>3}{2:0>3}".format(
                major, minor, bug
            )
            # Get rid of leading zeros.
            code = int(code_str)
        else:
            NotImplementedError
        return code

    def update_dev_version(self, version):
        """Update development version code and name in Gradle file."""
        with open(self._GRADLE_FILE) as fobj:
            build_gradle = fobj.read()
        build_gradle = self.set_version_code(
            gradle_str=build_gradle,
            flavor="dev",
            code=version
        )
        build_gradle = self.set_version_name(
            gradle_str=build_gradle,
            flavor="dev",
            name=version
        )
        with open(self._GRADLE_FILE, "w") as fobj:
            fobj.write(build_gradle)
        self.repo.index.add([self._GRADLE_FILE])
        self.repo.index.commit("Daily dev %s" % version)

    def create_dev_release(self):
        """Create a development release"""
        version = self.cli_args.version
        if not version:
            version = datetime.now().strftime("%Y%m%d")
        tag_name = "dev-%s" % version
        self.update_dev_version(version)
        self.repo.create_tag(
            path=tag_name,
            message="Daily dev %s" % version)
        print("""\n
Next step:
----------
  Push the release commit and tag using 'git push --follow-tags'.
""")

    def update_stable_version(self, version):
        """Update stable version code and name in Gradle file."""
        with open(self._GRADLE_FILE) as fobj:
            build_gradle = fobj.read()
        build_gradle = self.set_version_code(
            gradle_str=build_gradle,
            flavor="stable",
            code=self.version_to_code(version)
        )
        build_gradle = self.set_version_name(
            gradle_str=build_gradle,
            flavor="stable",
            name=version
        )
        with open(self._GRADLE_FILE, "w") as fobj:
            fobj.write(build_gradle)
        self.repo.index.add([self._GRADLE_FILE])
        self.repo.index.commit("Release %s" % version)

    def check_stable_release(self, version):
        """Check version string for stable release."""
        # Version not specified?
        if not version:
            self.error("Empty version.")
        # Format correct?
        rexpr = re.compile(r'\d+\.\d+.\d+')
        if not rexpr.match(version):
            self.error("Invalid version format.")
        # Release tag already exists?
        try:
            self.repo.tags["v" + version]
        except IndexError:
            # Tag does not exists.
            pass
        else:
            self.error("Version '%s' already exists." % version)
        # Version is increasing?
        pkg_ver_parse = packaging.version.parse
        for tag in self.repo.tags:
            tag_version = tag.name[1:]
            if pkg_ver_parse(version) < pkg_ver_parse(tag_version):
                self.error("Version not increasing.")

    def create_stable_release(self):
        """Create a stable release"""
        if not self.cli_args.skip_checks:
            self.check_stable_release(version=self.cli_args.version)
        self.update_stable_version(self.cli_args.version)
        tag_name = "v%s" % self.cli_args.version
        self.repo.create_tag(
            path=tag_name,
            message="Release %s" % self.cli_args.version)
        print("""\n
Next step:
----------
  Push the release tag using 'git push --follow-tags'.
""")


if __name__ == "__main__":
    Release().main()
