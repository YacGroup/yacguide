plugins {
    id 'com.github.triplet.play' version '3.6.0'
    id 'com.mikepenz.aboutlibraries.plugin'
    id 'com.google.devtools.ksp'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'de.mannodermaus.android-junit5'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file('keystore.properties')
// Create this file with some default values because otherwise the Gradle build fails.
if (!keystorePropertiesFile.exists()) {
    keystorePropertiesFile.text = '''\
// These are just some default values.
storePassword=yacguide
keyPassword=yacguide_key
keyAlias=key0
storeFile=keystore.jks
playServicesFile=google-services.json
'''
}
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

play {
    serviceAccountCredentials.set(rootProject.file(keystoreProperties['playServicesFile']))
    // This disables GPP by default.
    enabled.set(false)
}

android {
    namespace 'com.yacgroup.yacguide'
    defaultConfig {
        applicationId 'com.yacgroup.yacguide'
        compileSdk 35
        minSdkVersion 26
        targetSdkVersion 35
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments runnerBuilder: 'de.mannodermaus.junit5.AndroidJUnit5Builder'
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = 'yacguide'
        ksp {
            // https://developer.android.com/reference/androidx/room/Database#getExportSchema()
            arg('room.schemaLocation', "$projectDir/schemas")
        }
    }
    signingConfigs {
        gplay {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.gplay
        }
        debug {
            // This ensures that the app can be installed on the phone in parallel to any
            // already installed version.
            applicationIdSuffix '.debug'
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
    flavorDimensions += 'default'
    productFlavors {
        stable {
            dimension 'default'
            versionCode 9001
            versionName '0.9.1'
        }
        dev {
            dimension 'default'
            applicationIdSuffix '.dev'
            versionCode 20250325
            versionName '20250325'
        }
    }
    playConfigs {
        stable {
            track.set('production')
            enabled.set(true)
        }
        dev {
            track.set('beta')
            enabled.set(true)
        }
    }
    packagingOptions {
        resources.excludes.add('META-INF/*')
    }
    compileOptions {
        // See https://kotlinlang.org/docs/gradle-configure-project.html#gradle-java-toolchains-support
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        // https://kotlinlang.org/docs/faq.html#which-versions-of-jvm-does-kotlin-target
        jvmTarget = '21'
    }
    testOptions {
        unitTests.all {
            // https://github.com/junit-team/junit5-samples/blob/r5.11.3/junit5-jupiter-starter-gradle/build.gradle
            useJUnitPlatform()
        }
    }
}

// https://github.com/mikepenz/AboutLibraries/blob/develop/plugin-build/plugin/src/main/kotlin/com/mikepenz/aboutlibraries/plugin/AboutLibrariesExtension.kt
aboutLibraries {
    prettyPrint = true
    configPath = 'config/aboutLibraries'
    excludeFields = ['generated']
}

dependencies {
    // Room
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.test:core-ktx:1.6.1'

    def roomVersion = '2.6.1'

    implementation "androidx.room:room-runtime:$roomVersion"
    ksp "androidx.room:room-compiler:$roomVersion"

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$roomVersion"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$roomVersion"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$roomVersion"

    implementation 'net.sf.kxml:kxml2:2.3.0'
    implementation 'com.caverock:androidsvg:1.4'
    implementation "com.github.AppDevNext:AndroidChart:3.1.0.25"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0'

    // Unit Tests
    // https://github.com/junit-team/junit5-samples/blob/r5.11.3/junit5-jupiter-starter-gradle/build.gradle
    testImplementation(platform('org.junit:junit-bom:5.11.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')

    // Intstrumentation Tests
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.9.0'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'
    androidTestImplementation 'de.mannodermaus.junit5:android-test-core:1.6.0'
    androidTestRuntimeOnly 'de.mannodermaus.junit5:android-test-runner:1.6.0'

    /*
     * Markwon for rendering Markdown
     *
     * https://github.com/noties/Markwon
     */
    def markwonVersion = '4.6.2'
    implementation "io.noties.markwon:core:$markwonVersion"
    implementation "io.noties.markwon:linkify:$markwonVersion"

    /*
     * CSV library for tour book export
     *
     * https://commons.apache.org/proper/commons-csv/
     */
    implementation 'org.apache.commons:commons-csv:1.12.0'

    // For introspection
    implementation 'org.jetbrains.kotlin:kotlin-reflect:2.1.0'

    /*
     * Listing all used libraries
     *
     * https://github.com/mikepenz/AboutLibraries
     */
    implementation "com.mikepenz:aboutlibraries-core:$aboutlibrariesVersion"

    /*
     * Used for custom tabs to show web content without leaving the app.
     *
     * https://developer.chrome.com/docs/android/custom-tabs/
     */
    implementation 'androidx.browser:browser:1.8.0'

    /*
     * Used for building the app settings activity.
     *
     * https://developer.android.com/jetpack/androidx/releases/preference
     * https://developer.android.com/develop/ui/views/components/settings
     */
    implementation "androidx.preference:preference-ktx:1.2.1"
    implementation "com.github.skydoves:colorpickerpreference:2.0.6"
}
